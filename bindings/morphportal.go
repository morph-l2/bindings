// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bindings

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/scroll-tech/go-ethereum"
	"github.com/scroll-tech/go-ethereum/accounts/abi"
	"github.com/scroll-tech/go-ethereum/accounts/abi/bind"
	"github.com/scroll-tech/go-ethereum/common"
	"github.com/scroll-tech/go-ethereum/core/types"
	"github.com/scroll-tech/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TypesWithdrawalTransaction is an auto generated low-level Go binding around an user-defined struct.
type TypesWithdrawalTransaction struct {
	Nonce    *big.Int
	Sender   common.Address
	Target   common.Address
	Value    *big.Int
	GasLimit *big.Int
	Data     []byte
}

// MorphPortalMetaData contains all meta data concerning the MorphPortal contract.
var MorphPortalMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_guardian\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_paused\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"_config\",\"type\":\"address\",\"internalType\":\"contractSystemConfig\"},{\"name\":\"_rollup\",\"type\":\"address\",\"internalType\":\"contractRollup\"},{\"name\":\"_l1Messenger\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"GUARDIAN\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"ROLLUP\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractRollup\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"SYSTEM_CONFIG\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractSystemConfig\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"appendEnforcedTransaction\",\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_target\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"computeTransactionHash\",\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_queueIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_value\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_target\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_gasLimit\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"depositTransaction\",\"inputs\":[{\"name\":\"_to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_gasLimit\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"_isCreation\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"_data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"dropCrossDomainMessage\",\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"finalizeWithdrawalTransaction\",\"inputs\":[{\"name\":\"_tx\",\"type\":\"tuple\",\"internalType\":\"structTypes.WithdrawalTransaction\",\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"sender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"target\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"gasLimit\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"finalizedWithdrawals\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getCrossDomainMessage\",\"inputs\":[{\"name\":\"_queueIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[{\"name\":\"_paused\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"_l1Messenger\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"isMessageDropped\",\"inputs\":[{\"name\":\"_queueIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"isMessageSkipped\",\"inputs\":[{\"name\":\"_queueIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"l1Messenger\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"l2Sender\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"messageQueue\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"minimumGasLimit\",\"inputs\":[{\"name\":\"_byteCount\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"nextCrossDomainMessageIndex\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"params\",\"inputs\":[],\"outputs\":[{\"name\":\"prevBaseFee\",\"type\":\"uint128\",\"internalType\":\"uint128\"},{\"name\":\"prevBoughtGas\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"prevBlockNum\",\"type\":\"uint64\",\"internalType\":\"uint64\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pause\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"paused\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"pendingQueueIndex\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"popCrossDomainMessage\",\"inputs\":[{\"name\":\"_startIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_count\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"_skippedBitmap\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"proveWithdrawalTransaction\",\"inputs\":[{\"name\":\"_tx\",\"type\":\"tuple\",\"internalType\":\"structTypes.WithdrawalTransaction\",\"components\":[{\"name\":\"nonce\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"sender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"target\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"gasLimit\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}]},{\"name\":\"_withdrawalProof\",\"type\":\"bytes32[32]\",\"internalType\":\"bytes32[32]\"},{\"name\":\"_withdrawalRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"provenWithdrawals\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"withdrawalRoot\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"timestamp\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"withdrawalIndex\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"unpause\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"verifyMerkleProof\",\"inputs\":[{\"name\":\"leafHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"smtProof\",\"type\":\"bytes32[32]\",\"internalType\":\"bytes32[32]\"},{\"name\":\"index\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"root\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"version\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"DequeueTransaction\",\"inputs\":[{\"name\":\"startIndex\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"count\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"skippedBitmap\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"DropTransaction\",\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Paused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"QueueTransaction\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"target\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"queueIndex\",\"type\":\"uint64\",\"indexed\":false,\"internalType\":\"uint64\"},{\"name\":\"gasLimit\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"TransactionDeposited\",\"inputs\":[{\"name\":\"from\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"version\",\"type\":\"uint256\",\"indexed\":true,\"internalType\":\"uint256\"},{\"name\":\"opaqueData\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Unpaused\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"WithdrawalFinalized\",\"inputs\":[{\"name\":\"withdrawalHash\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"success\",\"type\":\"bool\",\"indexed\":false,\"internalType\":\"bool\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"WithdrawalProven\",\"inputs\":[{\"name\":\"withdrawalHash\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"from\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false}]",
	Bin: "0x6101406040523480156200001257600080fd5b50604051620040b3380380620040b383398101604081905262000035916200028b565b6001608052600660a052600060c0526001600160a01b038086166101005283811660e0528216610120526200006b848262000076565b50505050506200030f565b600054610100900460ff1615808015620000975750600054600160ff909116105b80620000b35750303b158015620000b3575060005460ff166001145b6200011c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801562000140576000805461ff0019166101001790555b6036805461dead6001600160a01b031991821617909155603a805460ff1916851515179055603780549091166001600160a01b03841617905562000183620001cf565b8015620001ca576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b600054610100900460ff166200023c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840162000113565b60408051606081018252633b9aca0080825260006020830152436001600160401b031691909201819052600160c01b0217600155565b6001600160a01b03811681146200028857600080fd5b50565b600080600080600060a08688031215620002a457600080fd5b8551620002b18162000272565b60208701519095508015158114620002c857600080fd5b6040870151909450620002db8162000272565b6060870151909350620002ee8162000272565b6080870151909250620003018162000272565b809150509295509295909350565b60805160a05160c05160e0516101005161012051613d1c620003976000396000818161041f0152818161099901528181611272015281816113ae015281816119a50152612408015260008181610336015281816107ce0152610c7301526000818161064a0152612bd4015260006109370152600061090e015260006108e50152613d1c6000f3fe6080604052600436106101b75760003560e01c806391652461116100ec578063ae453cd51161008a578063e965084c11610064578063e965084c146105ce578063e9e05c4214610625578063f049875014610638578063fd0ad31e1461066c57600080fd5b8063ae453cd5146104ed578063bdc6f0a01461050d578063cff0ab961461052d57600080fd5b80639bf62d82116100c65780639bf62d8214610441578063a14238e71461046e578063a35d99df1461049e578063a85006ca146104d757600080fd5b806391652461146103cd57806394aeecd5146103ed5780639611c5c21461040d57600080fd5b80635c975abb116101595780637d82191a116101335780637d82191a146103585780638456cb591461037857806385ee7ba61461038d5780638c3152e9146103ad57600080fd5b80635c975abb146102b85780636140e0e6146102d2578063724c184c1461032457600080fd5b80633f4ba83a116101955780633f4ba83a1461023f57806354fd4d501461025657806355f613ce146102785780635ad9945a1461029857600080fd5b806329aa604b146101bc578063340735f7146101ef5780633e6dada11461021f575b600080fd5b3480156101c857600080fd5b506101dc6101d73660046132c1565b610681565b6040519081526020015b60405180910390f35b3480156101fb57600080fd5b5061020f61020a3660046132ec565b6106a2565b60405190151581526020016101e6565b34801561022b57600080fd5b5061020f61023a3660046132c1565b61076c565b34801561024b57600080fd5b506102546107b6565b005b34801561026257600080fd5b5061026b6108de565b6040516101e69190613399565b34801561028457600080fd5b506102546102933660046133ac565b610981565b3480156102a457600080fd5b506101dc6102b3366004613445565b610a30565b3480156102c457600080fd5b50603a5461020f9060ff1681565b3480156102de57600080fd5b506037546102ff9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101e6565b34801561033057600080fd5b506102ff7f000000000000000000000000000000000000000000000000000000000000000081565b34801561036457600080fd5b5061020f6103733660046132c1565b610c25565b34801561038457600080fd5b50610254610c5b565b34801561039957600080fd5b506102546103a83660046134d7565b610d7a565b3480156103b957600080fd5b506102546103c83660046136ae565b610f8a565b3480156103d957600080fd5b506102546103e83660046132c1565b6116c2565b3480156103f957600080fd5b506102546104083660046136e3565b611775565b34801561041957600080fd5b506102ff7f000000000000000000000000000000000000000000000000000000000000000081565b34801561044d57600080fd5b506036546102ff9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561047a57600080fd5b5061020f6104893660046132c1565b60386020526000908152604090205460ff1681565b3480156104aa57600080fd5b506104be6104b9366004613755565b611be6565b60405167ffffffffffffffff90911681526020016101e6565b3480156104e357600080fd5b506101dc60335481565b3480156104f957600080fd5b506101dc6105083660046132c1565b611bff565b34801561051957600080fd5b50610254610528366004613770565b611c26565b34801561053957600080fd5b50600154610595906fffffffffffffffffffffffffffffffff81169067ffffffffffffffff7001000000000000000000000000000000008204811691780100000000000000000000000000000000000000000000000090041683565b604080516fffffffffffffffffffffffffffffffff909416845267ffffffffffffffff92831660208501529116908201526060016101e6565b3480156105da57600080fd5b5061060a6105e93660046132c1565b60396020526000908152604090208054600182015460029092015490919083565b604080519384526020840192909252908201526060016101e6565b6102546106333660046137e8565b611d5a565b34801561064457600080fd5b506102ff7f000000000000000000000000000000000000000000000000000000000000000081565b34801561067857600080fd5b506032546101dc565b6032818154811061069157600080fd5b600091825260209091200154905081565b600084815b6020811015610760578085901c60011660010361070d578581602081106106d0576106d0613849565b6020020135826040516020016106f0929190918252602082015260400190565b604051602081830303815290604052805190602001209150610758565b8186826020811061072057610720613849565b602002013560405160200161073f929190918252602082015260400190565b6040516020818303038152906040528051906020012091505b6001016106a7565b50909114949350505050565b600881901c600090815260356020526040812054600160ff84161b16151580156107b05750600882901c600090815260346020526040902054600160ff84161b1615155b92915050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610880576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4d6f727068506f7274616c3a206f6e6c7920677561726469616e2063616e207560448201527f6e7061757365000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b603a80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690556040513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa906020015b60405180910390a1565b60606109097f000000000000000000000000000000000000000000000000000000000000000061207f565b6109327f000000000000000000000000000000000000000000000000000000000000000061207f565b61095b7f000000000000000000000000000000000000000000000000000000000000000061207f565b60405160200161096d93929190613878565b604051602081830303815290604052905090565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610a20576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f524f4c4c555020636f6e747261637420756e61757468656e74696361746564006044820152606401610877565b610a2b83838361213d565b505050565b6000607e81610adc565b600081610a4957506001919050565b5b8115610a5f5760089190911c90600101610a4a565b919050565b806080831060018114610a9c57610a7a84610a3a565b60808101835360018301925084816020036008021b8352808301925050610abd565b8484151660018114610ab057848353610ab5565b608083535b506001820191505b509392505050565b806094815360609290921b60018301525060150190565b60056040510180610aef60018c83610a64565b9050610afd60018983610a64565b9050610b098982610ac5565b9050610b1760018b83610a64565b90506001861460018114610b7f576038871060018114610b6457610b3a88610a3a565b8060b701845360018401935088816020036008021b84528084019350508789843791870191610b79565b87608001835360018301925087898437918701915b50610b92565b610b8f6000893560001a84610a64565b91505b50610b9d8c82610ac5565b90508181036000806038831060018114610bd157610bba84610a3a565b60f78101600882021b851793506001019150610bdc565b8360c0019250600191505b5086816008021b821791506001810190508060080292508451831c8284610100031b17915080850394505080845250508181038220925050508092505050979650505050505050565b60006033548210610c3857506000919050565b600882901c600090815260356020526040902054600160ff84161b1615156107b0565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610d1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4d6f727068506f7274616c3a206f6e6c7920677561726469616e2063616e207060448201527f61757365000000000000000000000000000000000000000000000000000000006064820152608401610877565b603a80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556040513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258906020016108d4565b600054610100900460ff1615808015610d9a5750600054600160ff909116105b80610db45750303b158015610db4575060005460ff166001145b610e40576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610877565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610e9e57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6036805461dead7fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155603a80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168515151790556037805490911673ffffffffffffffffffffffffffffffffffffffff8416179055610f226122d4565b8015610a2b57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a1505050565b603a5460ff1615610ff7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4d6f727068506f7274616c3a20706175736564000000000000000000000000006044820152606401610877565b60365473ffffffffffffffffffffffffffffffffffffffff1661dead146110a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603c60248201527f4d6f727068506f7274616c3a2063616e206f6e6c792074726967676572206f6e60448201527f65207769746864726177616c20706572207472616e73616374696f6e000000006064820152608401610877565b60006110ab826123b7565b60008181526039602090815260408083208151606081018352815481526001820154938101849052600290910154918101919091529293509003611171576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f4d6f727068506f7274616c3a207769746864726177616c20686173206e6f742060448201527f6265656e2070726f76656e2079657400000000000000000000000000000000006064820152608401610877565b61117e8160200151612404565b611230576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604260248201527f4d6f727068506f7274616c3a2070726f76656e207769746864726177616c206660448201527f696e616c697a6174696f6e20706572696f6420686173206e6f7420656c61707360648201527f6564000000000000000000000000000000000000000000000000000000000000608482015260a401610877565b80516040517f04d7721500000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016916304d77215916112a99160040190815260200190565b602060405180830381865afa1580156112c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ea91906138ee565b90506000811161137c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4d6f727068506f7274616c3a20646f206e6f74207375626d697420776974686460448201527f726177616c526f6f7400000000000000000000000000000000000000000000006064820152608401610877565b6040517f2571098d000000000000000000000000000000000000000000000000000000008152600481018290526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632571098d90602401602060405180830381865afa15801561140a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142e91906138ee565b905080611497576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f6261746368206e6f7420766572696669656400000000000000000000000000006044820152606401610877565b60008481526038602052604090205460ff1615611536576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4d6f727068506f7274616c3a207769746864726177616c2068617320616c726560448201527f616479206265656e2066696e616c697a656400000000000000000000000000006064820152608401610877565b600084815260386020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055908701516036805473ffffffffffffffffffffffffffffffffffffffff9092167fffffffffffffffffffffffff00000000000000000000000000000000000000009092169190911790558601516080870151606088015160a08901516115d8939291906124a7565b603680547fffffffffffffffffffffffff00000000000000000000000000000000000000001661dead17905560405190915085907fdb5c7652857aa163daadd670e116628fb42e869d8ac4251ef8971d9e5727df1b9061163d90841515815260200190565b60405180910390a2801580156116535750326001145b156116ba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4d6f727068506f7274616c3a207769746864726177616c206661696c656400006044820152606401610877565b505050505050565b60375473ffffffffffffffffffffffffffffffffffffffff163314611769576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f6d657373656e67657220636f6e747261637420756e61757468656e746963617460448201527f65640000000000000000000000000000000000000000000000000000000000006064820152608401610877565b61177281612505565b50565b603a5460ff16156117e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4d6f727068506f7274616c3a20706175736564000000000000000000000000006044820152606401610877565b3073ffffffffffffffffffffffffffffffffffffffff16836040015173ffffffffffffffffffffffffffffffffffffffff16036118a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603c60248201527f4d6f727068506f7274616c3a20796f752063616e6e6f742073656e64206d657360448201527f736167657320746f2074686520706f7274616c20636f6e7472616374000000006064820152608401610877565b60006118ac846123b7565b6000818152603960209081526040918290208251606081018452815481526001820154928101839052600290910154928101929092529192509015611973576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603460248201527f4d6f727068506f7274616c3a207769746864726177616c20686173682068617360448201527f20616c7265616479206265656e2070726f76656e0000000000000000000000006064820152608401610877565b6040517f04d77215000000000000000000000000000000000000000000000000000000008152600481018490526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906304d7721590602401602060405180830381865afa158015611a01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2591906138ee565b905060008111611ab7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4d6f727068506f7274616c3a20646f206e6f74207375626d697420776974686460448201527f726177616c526f6f7400000000000000000000000000000000000000000000006064820152608401610877565b611ac783868860000151876106a2565b611b53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f4d6f727068506f7274616c3a20696e76616c6964207769746864726177616c2060448201527f696e636c7573696f6e2070726f6f6600000000000000000000000000000000006064820152608401610877565b6040805160608101825285815242602080830191825289518385019081526000888152603983528581209451855592516001850155516002909301929092558883015191890151925173ffffffffffffffffffffffffffffffffffffffff928316939092169186917f67a6208cfcc0801d50f6cbe764733f4fddf66ac0b04442061a8a8c0cb6b63f6291a4505050505050565b6000611bf3826010613936565b6107b090615208613962565b600060328281548110611c1457611c14613849565b90600052602060002001549050919050565b60375473ffffffffffffffffffffffffffffffffffffffff163314611ccd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f6d657373656e67657220636f6e747261637420756e61757468656e746963617460448201527f65640000000000000000000000000000000000000000000000000000000000006064820152608401610877565b73ffffffffffffffffffffffffffffffffffffffff86163b15611d4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600860248201527f6f6e6c7920454f410000000000000000000000000000000000000000000000006044820152606401610877565b6116ba8686868686866126ca565b8360005a60375490915073ffffffffffffffffffffffffffffffffffffffff163314611e08576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f6d657373656e67657220636f6e747261637420756e61757468656e746963617460448201527f65640000000000000000000000000000000000000000000000000000000000006064820152608401610877565b8415611eb25773ffffffffffffffffffffffffffffffffffffffff881615611eb2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603d60248201527f4d6f727068506f7274616c3a206d7573742073656e6420746f2061646472657360448201527f73283029207768656e206372656174696e67206120636f6e74726163740000006064820152608401610877565b611ebb83611be6565b67ffffffffffffffff168667ffffffffffffffff161015611f38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4d6f727068506f7274616c3a20676173206c696d697420746f6f20736d616c6c6044820152606401610877565b6201d4c0831115611fa5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4d6f727068506f7274616c3a206461746120746f6f206c6172676500000000006044820152606401610877565b3373111100000000000000000000000000000000111101611fd4818a8a67ffffffffffffffff8b1689896126ca565b6000348989898989604051602001611ff19695949392919061398a565b604051602081830303815290604052905060008a73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fb3813568d9991fc951961fcb4c784893574240a28925604d09fc577c55bb7c32846040516120619190613399565b60405180910390a45050612075828261277d565b5050505050505050565b6060600061208c83612aa0565b600101905060008167ffffffffffffffff8111156120ac576120ac61350a565b6040519080825280601f01601f1916602001820160405280156120d6576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846120e057509392505050565b6101008211156121a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f706f7020746f6f206d616e79206d6573736167657300000000000000000000006044820152606401610877565b8260335414612214576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f737461727420696e646578206d69736d617463680000000000000000000000006044820152606401610877565b600883901c600081815260356020526040902080546001851b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0193841660ff871681811b90921790925590929190610100818601111561228d5760018201600090815260356020526040902061010082900385901c90555b50505081830160335560408051848152602081018490529081018290527fc77f792f838ae38399ac31acc3348389aeb110ce7bedf3cfdbdd5e667926797090606001610f7d565b600054610100900460ff1661236b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610877565b60408051606081018252633b9aca00808252600060208301524367ffffffffffffffff169190920181905278010000000000000000000000000000000000000000000000000217600155565b80516020808301516040808501516060860151608087015160a088015193516000976123e7979096959101613a12565b604051602081830303815290604052805190602001209050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f4daa2916040518163ffffffff1660e01b8152600401602060405180830381865afa158015612471573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249591906138ee565b61249f9083613a69565b421192915050565b60008060006124b7866000612b82565b9050806124ed576308c379a06000526020805278185361666543616c6c3a204e6f7420656e6f756768206761736058526064601cfd5b600080855160208701888b5af1979650505050505050565b6033548110612570576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f63616e6e6f742064726f702070656e64696e67206d65737361676500000000006044820152606401610877565b600881901c600090815260356020526040902054600160ff83161b166125f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f64726f70206e6f6e2d736b6970706564206d65737361676500000000000000006044820152606401610877565b600881901c600090815260346020526040902054600160ff83161b1615612675576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f6d65737361676520616c72656164792064726f707065640000000000000000006044820152606401610877565b600881901c60009081526034602052604090208054600160ff84161b1790556040518181527f43a375005206d20a83abc71722cba68c24434a8dc1f583775be7c3fde0396cbf9060200160405180910390a150565b60325460006126de8883888a898989610a30565b603280546001810182556000919091527f11df491316f14931039edfd4f8964c9a443b862f02d4c7611d18c2bc4e6ff6970181905560405190915073ffffffffffffffffffffffffffffffffffffffff80891691908a16907f69cfcb8e6d4192b8aba9902243912587f37e550d75c1fa801491fce26717f37e9061276b908a9087908b908b908b90613a7c565b60405180910390a35050505050505050565b6001546000906127b3907801000000000000000000000000000000000000000000000000900467ffffffffffffffff1643613ae8565b905060006127bf612ba0565b90506000816020015160ff16826000015163ffffffff166127e09190613afb565b9050821561291757600154600090612817908390700100000000000000000000000000000000900467ffffffffffffffff16613b63565b90506000836040015160ff168361282e9190613b83565b60015461284e9084906fffffffffffffffffffffffffffffffff16613b83565b6128589190613afb565b6001549091506000906128a9906128829084906fffffffffffffffffffffffffffffffff16613bcf565b866060015163ffffffff168760a001516fffffffffffffffffffffffffffffffff16612c66565b905060018611156128d8576128d561288282876040015160ff1660018a6128d09190613ae8565b612c83565b90505b6fffffffffffffffffffffffffffffffff16780100000000000000000000000000000000000000000000000067ffffffffffffffff4316021760015550505b6001805486919060109061294a908490700100000000000000000000000000000000900467ffffffffffffffff16613962565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550816000015163ffffffff16600160000160109054906101000a900467ffffffffffffffff1667ffffffffffffffff161315612a2d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603e60248201527f5265736f757263654d65746572696e673a2063616e6e6f7420627579206d6f7260448201527f6520676173207468616e20617661696c61626c6520676173206c696d697400006064820152608401610877565b600154600090612a59906fffffffffffffffffffffffffffffffff1667ffffffffffffffff8816613bef565b90506000612a6b48633b9aca00612cd8565b612a759083613c06565b905060005a612a849088613ae8565b90508082111561207557612075612a9b8284613ae8565b612cf0565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612ae9577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310612b15576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310612b3357662386f26fc10000830492506010015b6305f5e1008310612b4b576305f5e100830492506008015b6127108310612b5f57612710830492506004015b60648310612b71576064830492506002015b600a83106107b05760010192915050565b600080603f83619c4001026040850201603f5a021015949350505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a08101919091527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663cc731b026040518163ffffffff1660e01b815260040160c060405180830381865afa158015612c3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c619190613c3f565b905090565b6000612c7b612c758585612d19565b83612d28565b949350505050565b6000670de0b6b3a7640000612cc4612c9b8583613afb565b612cad90670de0b6b3a7640000613b63565b612cbf85670de0b6b3a7640000613b83565b612d37565b612cce9086613b83565b612c7b9190613afb565b6000818311612ce75781612ce9565b825b9392505050565b6000805a90505b825a612d039083613ae8565b1015610a2b57612d1282613cd7565b9150612cf7565b6000818313612ce75781612ce9565b6000818312612ce75781612ce9565b6000612ce9670de0b6b3a764000083612d4f86612d68565b612d599190613b83565b612d639190613afb565b612fac565b6000808213612dd3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f554e444546494e454400000000000000000000000000000000000000000000006044820152606401610877565b60006060612de0846131eb565b03609f8181039490941b90931c6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d7fffffffffffffffffffffffffffffffffffffff73c0c716a594e00d54e3c4cbc9018302821d7ffffffffffffffffffffffffffffffffffffffdc7b88c420e53a9890533129f6f01830290911d7fffffffffffffffffffffffffffffffffffffff465fda27eb4d63ded474e5f832019091027ffffffffffffffff5f6af8f7b3396644f18e157960000000000000000000000000105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b393909302929092017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b60007ffffffffffffffffffffffffffffffffffffffffffffffffdb731c958f34d94c18213612fdd57506000919050565b680755bf798b4a1bf1e5821261304f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f4558505f4f564552464c4f5700000000000000000000000000000000000000006044820152606401610877565b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056b80000000000000000000000001901d6bb17217f7d1cf79abc9e3b39881029093037fffffffffffffffffffffffffffffffffffffffdbf3ccf1604d263450f02a550481018102606090811d6d0277594991cfc85f6e2461837cd9018202811d7fffffffffffffffffffffffffffffffffffffe5adedaa1cb095af9e4da10e363c018202811d6db1bbb201f443cf962f1a1d3db4a5018202811d7ffffffffffffffffffffffffffffffffffffd38dc772608b0ae56cce01296c0eb018202811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765084018402831d9081019084017ffffffffffffffffffffffffffffffffffffffe2c69812cf03b0763fd454a8f7e010290911d6e0587f503bb6ea29d25fcb7401964500190910279d835ebba824c98fb31b83b2ca45c000000000000000000000000010574029d9dc38563c32e5c2f6dc192ee70ef65f9978af30260c3939093039290921c92915050565b6000808211613256576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600960248201527f554e444546494e454400000000000000000000000000000000000000000000006044820152606401610877565b5060016fffffffffffffffffffffffffffffffff821160071b82811c67ffffffffffffffff1060061b1782811c63ffffffff1060051b1782811c61ffff1060041b1782811c60ff10600390811b90911783811c600f1060021b1783811c909110821b1791821c111790565b6000602082840312156132d357600080fd5b5035919050565b8061040081018310156107b057600080fd5b600080600080610460858703121561330357600080fd5b8435935061331486602087016132da565b939693955050505061042082013591610440013590565b60005b8381101561334657818101518382015260200161332e565b50506000910152565b6000815180845261336781602086016020860161332b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000612ce9602083018461334f565b6000806000606084860312156133c157600080fd5b505081359360208301359350604090920135919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610a5f57600080fd5b60008083601f84011261340e57600080fd5b50813567ffffffffffffffff81111561342657600080fd5b60208301915083602082850101111561343e57600080fd5b9250929050565b600080600080600080600060c0888a03121561346057600080fd5b613469886133d8565b96506020880135955060408801359450613485606089016133d8565b93506080880135925060a088013567ffffffffffffffff8111156134a857600080fd5b6134b48a828b016133fc565b989b979a50959850939692959293505050565b80358015158114610a5f57600080fd5b600080604083850312156134ea57600080fd5b6134f3836134c7565b9150613501602084016133d8565b90509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160c0810167ffffffffffffffff8111828210171561355c5761355c61350a565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156135a9576135a961350a565b604052919050565b600060c082840312156135c357600080fd5b6135cb613539565b90508135815260206135de8184016133d8565b818301526135ee604084016133d8565b6040830152606083013560608301526080830135608083015260a083013567ffffffffffffffff8082111561362257600080fd5b818501915085601f83011261363657600080fd5b8135818111156136485761364861350a565b613678847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601613562565b9150808252868482850101111561368e57600080fd5b80848401858401376000848284010152508060a085015250505092915050565b6000602082840312156136c057600080fd5b813567ffffffffffffffff8111156136d757600080fd5b612c7b848285016135b1565b600080600061044084860312156136f957600080fd5b833567ffffffffffffffff81111561371057600080fd5b61371c868287016135b1565b93505061372c85602086016132da565b915061042084013590509250925092565b803567ffffffffffffffff81168114610a5f57600080fd5b60006020828403121561376757600080fd5b612ce98261373d565b60008060008060008060a0878903121561378957600080fd5b613792876133d8565b95506137a0602088016133d8565b94506040870135935060608701359250608087013567ffffffffffffffff8111156137ca57600080fd5b6137d689828a016133fc565b979a9699509497509295939492505050565b60008060008060008060a0878903121561380157600080fd5b61380a876133d8565b95506020870135945061381f6040880161373d565b935061382d606088016134c7565b9250608087013567ffffffffffffffff8111156137ca57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000845161388a81846020890161332b565b80830190507f2e0000000000000000000000000000000000000000000000000000000000000080825285516138c6816001850160208a0161332b565b600192019182015283516138e181600284016020880161332b565b0160020195945050505050565b60006020828403121561390057600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b67ffffffffffffffff81811683821602808216919082811461395a5761395a613907565b505092915050565b67ffffffffffffffff81811683821601908082111561398357613983613907565b5092915050565b8681528560208201527fffffffffffffffff0000000000000000000000000000000000000000000000008560c01b16604082015283151560f81b6048820152818360498301376000910160490190815295945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b868152600073ffffffffffffffffffffffffffffffffffffffff808816602084015280871660408401525084606083015283608083015260c060a0830152613a5d60c083018461334f565b98975050505050505050565b808201808211156107b0576107b0613907565b85815267ffffffffffffffff8516602082015283604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101949350505050565b818103818111156107b0576107b0613907565b600082613b0a57613b0a6139e3565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f800000000000000000000000000000000000000000000000000000000000000083141615613b5e57613b5e613907565b500590565b818103600083128015838313168383128216171561398357613983613907565b808202600082127f800000000000000000000000000000000000000000000000000000000000000084141615613bbb57613bbb613907565b81810583148215176107b0576107b0613907565b808201828112600083128015821682158216171561395a5761395a613907565b80820281158282048414176107b0576107b0613907565b600082613c1557613c156139e3565b500490565b805163ffffffff81168114610a5f57600080fd5b805160ff81168114610a5f57600080fd5b600060c08284031215613c5157600080fd5b613c59613539565b613c6283613c1a565b8152613c7060208401613c2e565b6020820152613c8160408401613c2e565b6040820152613c9260608401613c1a565b6060820152613ca360808401613c1a565b608082015260a08301516fffffffffffffffffffffffffffffffff81168114613ccb57600080fd5b60a08201529392505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613d0857613d08613907565b506001019056fea164736f6c6343000817000a",
}

// MorphPortalABI is the input ABI used to generate the binding from.
// Deprecated: Use MorphPortalMetaData.ABI instead.
var MorphPortalABI = MorphPortalMetaData.ABI

// MorphPortalBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MorphPortalMetaData.Bin instead.
var MorphPortalBin = MorphPortalMetaData.Bin

// DeployMorphPortal deploys a new Ethereum contract, binding an instance of MorphPortal to it.
func DeployMorphPortal(auth *bind.TransactOpts, backend bind.ContractBackend, _guardian common.Address, _paused bool, _config common.Address, _rollup common.Address, _l1Messenger common.Address) (common.Address, *types.Transaction, *MorphPortal, error) {
	parsed, err := MorphPortalMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MorphPortalBin), backend, _guardian, _paused, _config, _rollup, _l1Messenger)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MorphPortal{MorphPortalCaller: MorphPortalCaller{contract: contract}, MorphPortalTransactor: MorphPortalTransactor{contract: contract}, MorphPortalFilterer: MorphPortalFilterer{contract: contract}}, nil
}

// MorphPortal is an auto generated Go binding around an Ethereum contract.
type MorphPortal struct {
	MorphPortalCaller     // Read-only binding to the contract
	MorphPortalTransactor // Write-only binding to the contract
	MorphPortalFilterer   // Log filterer for contract events
}

// MorphPortalCaller is an auto generated read-only Go binding around an Ethereum contract.
type MorphPortalCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MorphPortalTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MorphPortalTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MorphPortalFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MorphPortalFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MorphPortalSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MorphPortalSession struct {
	Contract     *MorphPortal      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MorphPortalCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MorphPortalCallerSession struct {
	Contract *MorphPortalCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// MorphPortalTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MorphPortalTransactorSession struct {
	Contract     *MorphPortalTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// MorphPortalRaw is an auto generated low-level Go binding around an Ethereum contract.
type MorphPortalRaw struct {
	Contract *MorphPortal // Generic contract binding to access the raw methods on
}

// MorphPortalCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MorphPortalCallerRaw struct {
	Contract *MorphPortalCaller // Generic read-only contract binding to access the raw methods on
}

// MorphPortalTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MorphPortalTransactorRaw struct {
	Contract *MorphPortalTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMorphPortal creates a new instance of MorphPortal, bound to a specific deployed contract.
func NewMorphPortal(address common.Address, backend bind.ContractBackend) (*MorphPortal, error) {
	contract, err := bindMorphPortal(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MorphPortal{MorphPortalCaller: MorphPortalCaller{contract: contract}, MorphPortalTransactor: MorphPortalTransactor{contract: contract}, MorphPortalFilterer: MorphPortalFilterer{contract: contract}}, nil
}

// NewMorphPortalCaller creates a new read-only instance of MorphPortal, bound to a specific deployed contract.
func NewMorphPortalCaller(address common.Address, caller bind.ContractCaller) (*MorphPortalCaller, error) {
	contract, err := bindMorphPortal(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MorphPortalCaller{contract: contract}, nil
}

// NewMorphPortalTransactor creates a new write-only instance of MorphPortal, bound to a specific deployed contract.
func NewMorphPortalTransactor(address common.Address, transactor bind.ContractTransactor) (*MorphPortalTransactor, error) {
	contract, err := bindMorphPortal(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MorphPortalTransactor{contract: contract}, nil
}

// NewMorphPortalFilterer creates a new log filterer instance of MorphPortal, bound to a specific deployed contract.
func NewMorphPortalFilterer(address common.Address, filterer bind.ContractFilterer) (*MorphPortalFilterer, error) {
	contract, err := bindMorphPortal(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MorphPortalFilterer{contract: contract}, nil
}

// bindMorphPortal binds a generic wrapper to an already deployed contract.
func bindMorphPortal(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MorphPortalABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MorphPortal *MorphPortalRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MorphPortal.Contract.MorphPortalCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MorphPortal *MorphPortalRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MorphPortal.Contract.MorphPortalTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MorphPortal *MorphPortalRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MorphPortal.Contract.MorphPortalTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MorphPortal *MorphPortalCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MorphPortal.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MorphPortal *MorphPortalTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MorphPortal.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MorphPortal *MorphPortalTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MorphPortal.Contract.contract.Transact(opts, method, params...)
}

// GUARDIAN is a free data retrieval call binding the contract method 0x724c184c.
//
// Solidity: function GUARDIAN() view returns(address)
func (_MorphPortal *MorphPortalCaller) GUARDIAN(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MorphPortal.contract.Call(opts, &out, "GUARDIAN")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GUARDIAN is a free data retrieval call binding the contract method 0x724c184c.
//
// Solidity: function GUARDIAN() view returns(address)
func (_MorphPortal *MorphPortalSession) GUARDIAN() (common.Address, error) {
	return _MorphPortal.Contract.GUARDIAN(&_MorphPortal.CallOpts)
}

// GUARDIAN is a free data retrieval call binding the contract method 0x724c184c.
//
// Solidity: function GUARDIAN() view returns(address)
func (_MorphPortal *MorphPortalCallerSession) GUARDIAN() (common.Address, error) {
	return _MorphPortal.Contract.GUARDIAN(&_MorphPortal.CallOpts)
}

// ROLLUP is a free data retrieval call binding the contract method 0x9611c5c2.
//
// Solidity: function ROLLUP() view returns(address)
func (_MorphPortal *MorphPortalCaller) ROLLUP(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MorphPortal.contract.Call(opts, &out, "ROLLUP")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ROLLUP is a free data retrieval call binding the contract method 0x9611c5c2.
//
// Solidity: function ROLLUP() view returns(address)
func (_MorphPortal *MorphPortalSession) ROLLUP() (common.Address, error) {
	return _MorphPortal.Contract.ROLLUP(&_MorphPortal.CallOpts)
}

// ROLLUP is a free data retrieval call binding the contract method 0x9611c5c2.
//
// Solidity: function ROLLUP() view returns(address)
func (_MorphPortal *MorphPortalCallerSession) ROLLUP() (common.Address, error) {
	return _MorphPortal.Contract.ROLLUP(&_MorphPortal.CallOpts)
}

// SYSTEMCONFIG is a free data retrieval call binding the contract method 0xf0498750.
//
// Solidity: function SYSTEM_CONFIG() view returns(address)
func (_MorphPortal *MorphPortalCaller) SYSTEMCONFIG(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MorphPortal.contract.Call(opts, &out, "SYSTEM_CONFIG")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SYSTEMCONFIG is a free data retrieval call binding the contract method 0xf0498750.
//
// Solidity: function SYSTEM_CONFIG() view returns(address)
func (_MorphPortal *MorphPortalSession) SYSTEMCONFIG() (common.Address, error) {
	return _MorphPortal.Contract.SYSTEMCONFIG(&_MorphPortal.CallOpts)
}

// SYSTEMCONFIG is a free data retrieval call binding the contract method 0xf0498750.
//
// Solidity: function SYSTEM_CONFIG() view returns(address)
func (_MorphPortal *MorphPortalCallerSession) SYSTEMCONFIG() (common.Address, error) {
	return _MorphPortal.Contract.SYSTEMCONFIG(&_MorphPortal.CallOpts)
}

// ComputeTransactionHash is a free data retrieval call binding the contract method 0x5ad9945a.
//
// Solidity: function computeTransactionHash(address _sender, uint256 _queueIndex, uint256 _value, address _target, uint256 _gasLimit, bytes _data) pure returns(bytes32)
func (_MorphPortal *MorphPortalCaller) ComputeTransactionHash(opts *bind.CallOpts, _sender common.Address, _queueIndex *big.Int, _value *big.Int, _target common.Address, _gasLimit *big.Int, _data []byte) ([32]byte, error) {
	var out []interface{}
	err := _MorphPortal.contract.Call(opts, &out, "computeTransactionHash", _sender, _queueIndex, _value, _target, _gasLimit, _data)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ComputeTransactionHash is a free data retrieval call binding the contract method 0x5ad9945a.
//
// Solidity: function computeTransactionHash(address _sender, uint256 _queueIndex, uint256 _value, address _target, uint256 _gasLimit, bytes _data) pure returns(bytes32)
func (_MorphPortal *MorphPortalSession) ComputeTransactionHash(_sender common.Address, _queueIndex *big.Int, _value *big.Int, _target common.Address, _gasLimit *big.Int, _data []byte) ([32]byte, error) {
	return _MorphPortal.Contract.ComputeTransactionHash(&_MorphPortal.CallOpts, _sender, _queueIndex, _value, _target, _gasLimit, _data)
}

// ComputeTransactionHash is a free data retrieval call binding the contract method 0x5ad9945a.
//
// Solidity: function computeTransactionHash(address _sender, uint256 _queueIndex, uint256 _value, address _target, uint256 _gasLimit, bytes _data) pure returns(bytes32)
func (_MorphPortal *MorphPortalCallerSession) ComputeTransactionHash(_sender common.Address, _queueIndex *big.Int, _value *big.Int, _target common.Address, _gasLimit *big.Int, _data []byte) ([32]byte, error) {
	return _MorphPortal.Contract.ComputeTransactionHash(&_MorphPortal.CallOpts, _sender, _queueIndex, _value, _target, _gasLimit, _data)
}

// FinalizedWithdrawals is a free data retrieval call binding the contract method 0xa14238e7.
//
// Solidity: function finalizedWithdrawals(bytes32 ) view returns(bool)
func (_MorphPortal *MorphPortalCaller) FinalizedWithdrawals(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _MorphPortal.contract.Call(opts, &out, "finalizedWithdrawals", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// FinalizedWithdrawals is a free data retrieval call binding the contract method 0xa14238e7.
//
// Solidity: function finalizedWithdrawals(bytes32 ) view returns(bool)
func (_MorphPortal *MorphPortalSession) FinalizedWithdrawals(arg0 [32]byte) (bool, error) {
	return _MorphPortal.Contract.FinalizedWithdrawals(&_MorphPortal.CallOpts, arg0)
}

// FinalizedWithdrawals is a free data retrieval call binding the contract method 0xa14238e7.
//
// Solidity: function finalizedWithdrawals(bytes32 ) view returns(bool)
func (_MorphPortal *MorphPortalCallerSession) FinalizedWithdrawals(arg0 [32]byte) (bool, error) {
	return _MorphPortal.Contract.FinalizedWithdrawals(&_MorphPortal.CallOpts, arg0)
}

// GetCrossDomainMessage is a free data retrieval call binding the contract method 0xae453cd5.
//
// Solidity: function getCrossDomainMessage(uint256 _queueIndex) view returns(bytes32)
func (_MorphPortal *MorphPortalCaller) GetCrossDomainMessage(opts *bind.CallOpts, _queueIndex *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _MorphPortal.contract.Call(opts, &out, "getCrossDomainMessage", _queueIndex)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetCrossDomainMessage is a free data retrieval call binding the contract method 0xae453cd5.
//
// Solidity: function getCrossDomainMessage(uint256 _queueIndex) view returns(bytes32)
func (_MorphPortal *MorphPortalSession) GetCrossDomainMessage(_queueIndex *big.Int) ([32]byte, error) {
	return _MorphPortal.Contract.GetCrossDomainMessage(&_MorphPortal.CallOpts, _queueIndex)
}

// GetCrossDomainMessage is a free data retrieval call binding the contract method 0xae453cd5.
//
// Solidity: function getCrossDomainMessage(uint256 _queueIndex) view returns(bytes32)
func (_MorphPortal *MorphPortalCallerSession) GetCrossDomainMessage(_queueIndex *big.Int) ([32]byte, error) {
	return _MorphPortal.Contract.GetCrossDomainMessage(&_MorphPortal.CallOpts, _queueIndex)
}

// IsMessageDropped is a free data retrieval call binding the contract method 0x3e6dada1.
//
// Solidity: function isMessageDropped(uint256 _queueIndex) view returns(bool)
func (_MorphPortal *MorphPortalCaller) IsMessageDropped(opts *bind.CallOpts, _queueIndex *big.Int) (bool, error) {
	var out []interface{}
	err := _MorphPortal.contract.Call(opts, &out, "isMessageDropped", _queueIndex)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMessageDropped is a free data retrieval call binding the contract method 0x3e6dada1.
//
// Solidity: function isMessageDropped(uint256 _queueIndex) view returns(bool)
func (_MorphPortal *MorphPortalSession) IsMessageDropped(_queueIndex *big.Int) (bool, error) {
	return _MorphPortal.Contract.IsMessageDropped(&_MorphPortal.CallOpts, _queueIndex)
}

// IsMessageDropped is a free data retrieval call binding the contract method 0x3e6dada1.
//
// Solidity: function isMessageDropped(uint256 _queueIndex) view returns(bool)
func (_MorphPortal *MorphPortalCallerSession) IsMessageDropped(_queueIndex *big.Int) (bool, error) {
	return _MorphPortal.Contract.IsMessageDropped(&_MorphPortal.CallOpts, _queueIndex)
}

// IsMessageSkipped is a free data retrieval call binding the contract method 0x7d82191a.
//
// Solidity: function isMessageSkipped(uint256 _queueIndex) view returns(bool)
func (_MorphPortal *MorphPortalCaller) IsMessageSkipped(opts *bind.CallOpts, _queueIndex *big.Int) (bool, error) {
	var out []interface{}
	err := _MorphPortal.contract.Call(opts, &out, "isMessageSkipped", _queueIndex)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMessageSkipped is a free data retrieval call binding the contract method 0x7d82191a.
//
// Solidity: function isMessageSkipped(uint256 _queueIndex) view returns(bool)
func (_MorphPortal *MorphPortalSession) IsMessageSkipped(_queueIndex *big.Int) (bool, error) {
	return _MorphPortal.Contract.IsMessageSkipped(&_MorphPortal.CallOpts, _queueIndex)
}

// IsMessageSkipped is a free data retrieval call binding the contract method 0x7d82191a.
//
// Solidity: function isMessageSkipped(uint256 _queueIndex) view returns(bool)
func (_MorphPortal *MorphPortalCallerSession) IsMessageSkipped(_queueIndex *big.Int) (bool, error) {
	return _MorphPortal.Contract.IsMessageSkipped(&_MorphPortal.CallOpts, _queueIndex)
}

// L1Messenger is a free data retrieval call binding the contract method 0x6140e0e6.
//
// Solidity: function l1Messenger() view returns(address)
func (_MorphPortal *MorphPortalCaller) L1Messenger(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MorphPortal.contract.Call(opts, &out, "l1Messenger")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L1Messenger is a free data retrieval call binding the contract method 0x6140e0e6.
//
// Solidity: function l1Messenger() view returns(address)
func (_MorphPortal *MorphPortalSession) L1Messenger() (common.Address, error) {
	return _MorphPortal.Contract.L1Messenger(&_MorphPortal.CallOpts)
}

// L1Messenger is a free data retrieval call binding the contract method 0x6140e0e6.
//
// Solidity: function l1Messenger() view returns(address)
func (_MorphPortal *MorphPortalCallerSession) L1Messenger() (common.Address, error) {
	return _MorphPortal.Contract.L1Messenger(&_MorphPortal.CallOpts)
}

// L2Sender is a free data retrieval call binding the contract method 0x9bf62d82.
//
// Solidity: function l2Sender() view returns(address)
func (_MorphPortal *MorphPortalCaller) L2Sender(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MorphPortal.contract.Call(opts, &out, "l2Sender")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// L2Sender is a free data retrieval call binding the contract method 0x9bf62d82.
//
// Solidity: function l2Sender() view returns(address)
func (_MorphPortal *MorphPortalSession) L2Sender() (common.Address, error) {
	return _MorphPortal.Contract.L2Sender(&_MorphPortal.CallOpts)
}

// L2Sender is a free data retrieval call binding the contract method 0x9bf62d82.
//
// Solidity: function l2Sender() view returns(address)
func (_MorphPortal *MorphPortalCallerSession) L2Sender() (common.Address, error) {
	return _MorphPortal.Contract.L2Sender(&_MorphPortal.CallOpts)
}

// MessageQueue is a free data retrieval call binding the contract method 0x29aa604b.
//
// Solidity: function messageQueue(uint256 ) view returns(bytes32)
func (_MorphPortal *MorphPortalCaller) MessageQueue(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _MorphPortal.contract.Call(opts, &out, "messageQueue", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// MessageQueue is a free data retrieval call binding the contract method 0x29aa604b.
//
// Solidity: function messageQueue(uint256 ) view returns(bytes32)
func (_MorphPortal *MorphPortalSession) MessageQueue(arg0 *big.Int) ([32]byte, error) {
	return _MorphPortal.Contract.MessageQueue(&_MorphPortal.CallOpts, arg0)
}

// MessageQueue is a free data retrieval call binding the contract method 0x29aa604b.
//
// Solidity: function messageQueue(uint256 ) view returns(bytes32)
func (_MorphPortal *MorphPortalCallerSession) MessageQueue(arg0 *big.Int) ([32]byte, error) {
	return _MorphPortal.Contract.MessageQueue(&_MorphPortal.CallOpts, arg0)
}

// MinimumGasLimit is a free data retrieval call binding the contract method 0xa35d99df.
//
// Solidity: function minimumGasLimit(uint64 _byteCount) pure returns(uint64)
func (_MorphPortal *MorphPortalCaller) MinimumGasLimit(opts *bind.CallOpts, _byteCount uint64) (uint64, error) {
	var out []interface{}
	err := _MorphPortal.contract.Call(opts, &out, "minimumGasLimit", _byteCount)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// MinimumGasLimit is a free data retrieval call binding the contract method 0xa35d99df.
//
// Solidity: function minimumGasLimit(uint64 _byteCount) pure returns(uint64)
func (_MorphPortal *MorphPortalSession) MinimumGasLimit(_byteCount uint64) (uint64, error) {
	return _MorphPortal.Contract.MinimumGasLimit(&_MorphPortal.CallOpts, _byteCount)
}

// MinimumGasLimit is a free data retrieval call binding the contract method 0xa35d99df.
//
// Solidity: function minimumGasLimit(uint64 _byteCount) pure returns(uint64)
func (_MorphPortal *MorphPortalCallerSession) MinimumGasLimit(_byteCount uint64) (uint64, error) {
	return _MorphPortal.Contract.MinimumGasLimit(&_MorphPortal.CallOpts, _byteCount)
}

// NextCrossDomainMessageIndex is a free data retrieval call binding the contract method 0xfd0ad31e.
//
// Solidity: function nextCrossDomainMessageIndex() view returns(uint256)
func (_MorphPortal *MorphPortalCaller) NextCrossDomainMessageIndex(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MorphPortal.contract.Call(opts, &out, "nextCrossDomainMessageIndex")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// NextCrossDomainMessageIndex is a free data retrieval call binding the contract method 0xfd0ad31e.
//
// Solidity: function nextCrossDomainMessageIndex() view returns(uint256)
func (_MorphPortal *MorphPortalSession) NextCrossDomainMessageIndex() (*big.Int, error) {
	return _MorphPortal.Contract.NextCrossDomainMessageIndex(&_MorphPortal.CallOpts)
}

// NextCrossDomainMessageIndex is a free data retrieval call binding the contract method 0xfd0ad31e.
//
// Solidity: function nextCrossDomainMessageIndex() view returns(uint256)
func (_MorphPortal *MorphPortalCallerSession) NextCrossDomainMessageIndex() (*big.Int, error) {
	return _MorphPortal.Contract.NextCrossDomainMessageIndex(&_MorphPortal.CallOpts)
}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() view returns(uint128 prevBaseFee, uint64 prevBoughtGas, uint64 prevBlockNum)
func (_MorphPortal *MorphPortalCaller) Params(opts *bind.CallOpts) (struct {
	PrevBaseFee   *big.Int
	PrevBoughtGas uint64
	PrevBlockNum  uint64
}, error) {
	var out []interface{}
	err := _MorphPortal.contract.Call(opts, &out, "params")

	outstruct := new(struct {
		PrevBaseFee   *big.Int
		PrevBoughtGas uint64
		PrevBlockNum  uint64
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.PrevBaseFee = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.PrevBoughtGas = *abi.ConvertType(out[1], new(uint64)).(*uint64)
	outstruct.PrevBlockNum = *abi.ConvertType(out[2], new(uint64)).(*uint64)

	return *outstruct, err

}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() view returns(uint128 prevBaseFee, uint64 prevBoughtGas, uint64 prevBlockNum)
func (_MorphPortal *MorphPortalSession) Params() (struct {
	PrevBaseFee   *big.Int
	PrevBoughtGas uint64
	PrevBlockNum  uint64
}, error) {
	return _MorphPortal.Contract.Params(&_MorphPortal.CallOpts)
}

// Params is a free data retrieval call binding the contract method 0xcff0ab96.
//
// Solidity: function params() view returns(uint128 prevBaseFee, uint64 prevBoughtGas, uint64 prevBlockNum)
func (_MorphPortal *MorphPortalCallerSession) Params() (struct {
	PrevBaseFee   *big.Int
	PrevBoughtGas uint64
	PrevBlockNum  uint64
}, error) {
	return _MorphPortal.Contract.Params(&_MorphPortal.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_MorphPortal *MorphPortalCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _MorphPortal.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_MorphPortal *MorphPortalSession) Paused() (bool, error) {
	return _MorphPortal.Contract.Paused(&_MorphPortal.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_MorphPortal *MorphPortalCallerSession) Paused() (bool, error) {
	return _MorphPortal.Contract.Paused(&_MorphPortal.CallOpts)
}

// PendingQueueIndex is a free data retrieval call binding the contract method 0xa85006ca.
//
// Solidity: function pendingQueueIndex() view returns(uint256)
func (_MorphPortal *MorphPortalCaller) PendingQueueIndex(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MorphPortal.contract.Call(opts, &out, "pendingQueueIndex")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PendingQueueIndex is a free data retrieval call binding the contract method 0xa85006ca.
//
// Solidity: function pendingQueueIndex() view returns(uint256)
func (_MorphPortal *MorphPortalSession) PendingQueueIndex() (*big.Int, error) {
	return _MorphPortal.Contract.PendingQueueIndex(&_MorphPortal.CallOpts)
}

// PendingQueueIndex is a free data retrieval call binding the contract method 0xa85006ca.
//
// Solidity: function pendingQueueIndex() view returns(uint256)
func (_MorphPortal *MorphPortalCallerSession) PendingQueueIndex() (*big.Int, error) {
	return _MorphPortal.Contract.PendingQueueIndex(&_MorphPortal.CallOpts)
}

// ProvenWithdrawals is a free data retrieval call binding the contract method 0xe965084c.
//
// Solidity: function provenWithdrawals(bytes32 ) view returns(bytes32 withdrawalRoot, uint256 timestamp, uint256 withdrawalIndex)
func (_MorphPortal *MorphPortalCaller) ProvenWithdrawals(opts *bind.CallOpts, arg0 [32]byte) (struct {
	WithdrawalRoot  [32]byte
	Timestamp       *big.Int
	WithdrawalIndex *big.Int
}, error) {
	var out []interface{}
	err := _MorphPortal.contract.Call(opts, &out, "provenWithdrawals", arg0)

	outstruct := new(struct {
		WithdrawalRoot  [32]byte
		Timestamp       *big.Int
		WithdrawalIndex *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.WithdrawalRoot = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.Timestamp = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.WithdrawalIndex = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// ProvenWithdrawals is a free data retrieval call binding the contract method 0xe965084c.
//
// Solidity: function provenWithdrawals(bytes32 ) view returns(bytes32 withdrawalRoot, uint256 timestamp, uint256 withdrawalIndex)
func (_MorphPortal *MorphPortalSession) ProvenWithdrawals(arg0 [32]byte) (struct {
	WithdrawalRoot  [32]byte
	Timestamp       *big.Int
	WithdrawalIndex *big.Int
}, error) {
	return _MorphPortal.Contract.ProvenWithdrawals(&_MorphPortal.CallOpts, arg0)
}

// ProvenWithdrawals is a free data retrieval call binding the contract method 0xe965084c.
//
// Solidity: function provenWithdrawals(bytes32 ) view returns(bytes32 withdrawalRoot, uint256 timestamp, uint256 withdrawalIndex)
func (_MorphPortal *MorphPortalCallerSession) ProvenWithdrawals(arg0 [32]byte) (struct {
	WithdrawalRoot  [32]byte
	Timestamp       *big.Int
	WithdrawalIndex *big.Int
}, error) {
	return _MorphPortal.Contract.ProvenWithdrawals(&_MorphPortal.CallOpts, arg0)
}

// VerifyMerkleProof is a free data retrieval call binding the contract method 0x340735f7.
//
// Solidity: function verifyMerkleProof(bytes32 leafHash, bytes32[32] smtProof, uint256 index, bytes32 root) pure returns(bool)
func (_MorphPortal *MorphPortalCaller) VerifyMerkleProof(opts *bind.CallOpts, leafHash [32]byte, smtProof [32][32]byte, index *big.Int, root [32]byte) (bool, error) {
	var out []interface{}
	err := _MorphPortal.contract.Call(opts, &out, "verifyMerkleProof", leafHash, smtProof, index, root)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyMerkleProof is a free data retrieval call binding the contract method 0x340735f7.
//
// Solidity: function verifyMerkleProof(bytes32 leafHash, bytes32[32] smtProof, uint256 index, bytes32 root) pure returns(bool)
func (_MorphPortal *MorphPortalSession) VerifyMerkleProof(leafHash [32]byte, smtProof [32][32]byte, index *big.Int, root [32]byte) (bool, error) {
	return _MorphPortal.Contract.VerifyMerkleProof(&_MorphPortal.CallOpts, leafHash, smtProof, index, root)
}

// VerifyMerkleProof is a free data retrieval call binding the contract method 0x340735f7.
//
// Solidity: function verifyMerkleProof(bytes32 leafHash, bytes32[32] smtProof, uint256 index, bytes32 root) pure returns(bool)
func (_MorphPortal *MorphPortalCallerSession) VerifyMerkleProof(leafHash [32]byte, smtProof [32][32]byte, index *big.Int, root [32]byte) (bool, error) {
	return _MorphPortal.Contract.VerifyMerkleProof(&_MorphPortal.CallOpts, leafHash, smtProof, index, root)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_MorphPortal *MorphPortalCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MorphPortal.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_MorphPortal *MorphPortalSession) Version() (string, error) {
	return _MorphPortal.Contract.Version(&_MorphPortal.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_MorphPortal *MorphPortalCallerSession) Version() (string, error) {
	return _MorphPortal.Contract.Version(&_MorphPortal.CallOpts)
}

// AppendEnforcedTransaction is a paid mutator transaction binding the contract method 0xbdc6f0a0.
//
// Solidity: function appendEnforcedTransaction(address _sender, address _target, uint256 _value, uint256 _gasLimit, bytes _data) returns()
func (_MorphPortal *MorphPortalTransactor) AppendEnforcedTransaction(opts *bind.TransactOpts, _sender common.Address, _target common.Address, _value *big.Int, _gasLimit *big.Int, _data []byte) (*types.Transaction, error) {
	return _MorphPortal.contract.Transact(opts, "appendEnforcedTransaction", _sender, _target, _value, _gasLimit, _data)
}

// AppendEnforcedTransaction is a paid mutator transaction binding the contract method 0xbdc6f0a0.
//
// Solidity: function appendEnforcedTransaction(address _sender, address _target, uint256 _value, uint256 _gasLimit, bytes _data) returns()
func (_MorphPortal *MorphPortalSession) AppendEnforcedTransaction(_sender common.Address, _target common.Address, _value *big.Int, _gasLimit *big.Int, _data []byte) (*types.Transaction, error) {
	return _MorphPortal.Contract.AppendEnforcedTransaction(&_MorphPortal.TransactOpts, _sender, _target, _value, _gasLimit, _data)
}

// AppendEnforcedTransaction is a paid mutator transaction binding the contract method 0xbdc6f0a0.
//
// Solidity: function appendEnforcedTransaction(address _sender, address _target, uint256 _value, uint256 _gasLimit, bytes _data) returns()
func (_MorphPortal *MorphPortalTransactorSession) AppendEnforcedTransaction(_sender common.Address, _target common.Address, _value *big.Int, _gasLimit *big.Int, _data []byte) (*types.Transaction, error) {
	return _MorphPortal.Contract.AppendEnforcedTransaction(&_MorphPortal.TransactOpts, _sender, _target, _value, _gasLimit, _data)
}

// DepositTransaction is a paid mutator transaction binding the contract method 0xe9e05c42.
//
// Solidity: function depositTransaction(address _to, uint256 _value, uint64 _gasLimit, bool _isCreation, bytes _data) payable returns()
func (_MorphPortal *MorphPortalTransactor) DepositTransaction(opts *bind.TransactOpts, _to common.Address, _value *big.Int, _gasLimit uint64, _isCreation bool, _data []byte) (*types.Transaction, error) {
	return _MorphPortal.contract.Transact(opts, "depositTransaction", _to, _value, _gasLimit, _isCreation, _data)
}

// DepositTransaction is a paid mutator transaction binding the contract method 0xe9e05c42.
//
// Solidity: function depositTransaction(address _to, uint256 _value, uint64 _gasLimit, bool _isCreation, bytes _data) payable returns()
func (_MorphPortal *MorphPortalSession) DepositTransaction(_to common.Address, _value *big.Int, _gasLimit uint64, _isCreation bool, _data []byte) (*types.Transaction, error) {
	return _MorphPortal.Contract.DepositTransaction(&_MorphPortal.TransactOpts, _to, _value, _gasLimit, _isCreation, _data)
}

// DepositTransaction is a paid mutator transaction binding the contract method 0xe9e05c42.
//
// Solidity: function depositTransaction(address _to, uint256 _value, uint64 _gasLimit, bool _isCreation, bytes _data) payable returns()
func (_MorphPortal *MorphPortalTransactorSession) DepositTransaction(_to common.Address, _value *big.Int, _gasLimit uint64, _isCreation bool, _data []byte) (*types.Transaction, error) {
	return _MorphPortal.Contract.DepositTransaction(&_MorphPortal.TransactOpts, _to, _value, _gasLimit, _isCreation, _data)
}

// DropCrossDomainMessage is a paid mutator transaction binding the contract method 0x91652461.
//
// Solidity: function dropCrossDomainMessage(uint256 _index) returns()
func (_MorphPortal *MorphPortalTransactor) DropCrossDomainMessage(opts *bind.TransactOpts, _index *big.Int) (*types.Transaction, error) {
	return _MorphPortal.contract.Transact(opts, "dropCrossDomainMessage", _index)
}

// DropCrossDomainMessage is a paid mutator transaction binding the contract method 0x91652461.
//
// Solidity: function dropCrossDomainMessage(uint256 _index) returns()
func (_MorphPortal *MorphPortalSession) DropCrossDomainMessage(_index *big.Int) (*types.Transaction, error) {
	return _MorphPortal.Contract.DropCrossDomainMessage(&_MorphPortal.TransactOpts, _index)
}

// DropCrossDomainMessage is a paid mutator transaction binding the contract method 0x91652461.
//
// Solidity: function dropCrossDomainMessage(uint256 _index) returns()
func (_MorphPortal *MorphPortalTransactorSession) DropCrossDomainMessage(_index *big.Int) (*types.Transaction, error) {
	return _MorphPortal.Contract.DropCrossDomainMessage(&_MorphPortal.TransactOpts, _index)
}

// FinalizeWithdrawalTransaction is a paid mutator transaction binding the contract method 0x8c3152e9.
//
// Solidity: function finalizeWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes) _tx) returns()
func (_MorphPortal *MorphPortalTransactor) FinalizeWithdrawalTransaction(opts *bind.TransactOpts, _tx TypesWithdrawalTransaction) (*types.Transaction, error) {
	return _MorphPortal.contract.Transact(opts, "finalizeWithdrawalTransaction", _tx)
}

// FinalizeWithdrawalTransaction is a paid mutator transaction binding the contract method 0x8c3152e9.
//
// Solidity: function finalizeWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes) _tx) returns()
func (_MorphPortal *MorphPortalSession) FinalizeWithdrawalTransaction(_tx TypesWithdrawalTransaction) (*types.Transaction, error) {
	return _MorphPortal.Contract.FinalizeWithdrawalTransaction(&_MorphPortal.TransactOpts, _tx)
}

// FinalizeWithdrawalTransaction is a paid mutator transaction binding the contract method 0x8c3152e9.
//
// Solidity: function finalizeWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes) _tx) returns()
func (_MorphPortal *MorphPortalTransactorSession) FinalizeWithdrawalTransaction(_tx TypesWithdrawalTransaction) (*types.Transaction, error) {
	return _MorphPortal.Contract.FinalizeWithdrawalTransaction(&_MorphPortal.TransactOpts, _tx)
}

// Initialize is a paid mutator transaction binding the contract method 0x85ee7ba6.
//
// Solidity: function initialize(bool _paused, address _l1Messenger) returns()
func (_MorphPortal *MorphPortalTransactor) Initialize(opts *bind.TransactOpts, _paused bool, _l1Messenger common.Address) (*types.Transaction, error) {
	return _MorphPortal.contract.Transact(opts, "initialize", _paused, _l1Messenger)
}

// Initialize is a paid mutator transaction binding the contract method 0x85ee7ba6.
//
// Solidity: function initialize(bool _paused, address _l1Messenger) returns()
func (_MorphPortal *MorphPortalSession) Initialize(_paused bool, _l1Messenger common.Address) (*types.Transaction, error) {
	return _MorphPortal.Contract.Initialize(&_MorphPortal.TransactOpts, _paused, _l1Messenger)
}

// Initialize is a paid mutator transaction binding the contract method 0x85ee7ba6.
//
// Solidity: function initialize(bool _paused, address _l1Messenger) returns()
func (_MorphPortal *MorphPortalTransactorSession) Initialize(_paused bool, _l1Messenger common.Address) (*types.Transaction, error) {
	return _MorphPortal.Contract.Initialize(&_MorphPortal.TransactOpts, _paused, _l1Messenger)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_MorphPortal *MorphPortalTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MorphPortal.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_MorphPortal *MorphPortalSession) Pause() (*types.Transaction, error) {
	return _MorphPortal.Contract.Pause(&_MorphPortal.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_MorphPortal *MorphPortalTransactorSession) Pause() (*types.Transaction, error) {
	return _MorphPortal.Contract.Pause(&_MorphPortal.TransactOpts)
}

// PopCrossDomainMessage is a paid mutator transaction binding the contract method 0x55f613ce.
//
// Solidity: function popCrossDomainMessage(uint256 _startIndex, uint256 _count, uint256 _skippedBitmap) returns()
func (_MorphPortal *MorphPortalTransactor) PopCrossDomainMessage(opts *bind.TransactOpts, _startIndex *big.Int, _count *big.Int, _skippedBitmap *big.Int) (*types.Transaction, error) {
	return _MorphPortal.contract.Transact(opts, "popCrossDomainMessage", _startIndex, _count, _skippedBitmap)
}

// PopCrossDomainMessage is a paid mutator transaction binding the contract method 0x55f613ce.
//
// Solidity: function popCrossDomainMessage(uint256 _startIndex, uint256 _count, uint256 _skippedBitmap) returns()
func (_MorphPortal *MorphPortalSession) PopCrossDomainMessage(_startIndex *big.Int, _count *big.Int, _skippedBitmap *big.Int) (*types.Transaction, error) {
	return _MorphPortal.Contract.PopCrossDomainMessage(&_MorphPortal.TransactOpts, _startIndex, _count, _skippedBitmap)
}

// PopCrossDomainMessage is a paid mutator transaction binding the contract method 0x55f613ce.
//
// Solidity: function popCrossDomainMessage(uint256 _startIndex, uint256 _count, uint256 _skippedBitmap) returns()
func (_MorphPortal *MorphPortalTransactorSession) PopCrossDomainMessage(_startIndex *big.Int, _count *big.Int, _skippedBitmap *big.Int) (*types.Transaction, error) {
	return _MorphPortal.Contract.PopCrossDomainMessage(&_MorphPortal.TransactOpts, _startIndex, _count, _skippedBitmap)
}

// ProveWithdrawalTransaction is a paid mutator transaction binding the contract method 0x94aeecd5.
//
// Solidity: function proveWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes) _tx, bytes32[32] _withdrawalProof, bytes32 _withdrawalRoot) returns()
func (_MorphPortal *MorphPortalTransactor) ProveWithdrawalTransaction(opts *bind.TransactOpts, _tx TypesWithdrawalTransaction, _withdrawalProof [32][32]byte, _withdrawalRoot [32]byte) (*types.Transaction, error) {
	return _MorphPortal.contract.Transact(opts, "proveWithdrawalTransaction", _tx, _withdrawalProof, _withdrawalRoot)
}

// ProveWithdrawalTransaction is a paid mutator transaction binding the contract method 0x94aeecd5.
//
// Solidity: function proveWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes) _tx, bytes32[32] _withdrawalProof, bytes32 _withdrawalRoot) returns()
func (_MorphPortal *MorphPortalSession) ProveWithdrawalTransaction(_tx TypesWithdrawalTransaction, _withdrawalProof [32][32]byte, _withdrawalRoot [32]byte) (*types.Transaction, error) {
	return _MorphPortal.Contract.ProveWithdrawalTransaction(&_MorphPortal.TransactOpts, _tx, _withdrawalProof, _withdrawalRoot)
}

// ProveWithdrawalTransaction is a paid mutator transaction binding the contract method 0x94aeecd5.
//
// Solidity: function proveWithdrawalTransaction((uint256,address,address,uint256,uint256,bytes) _tx, bytes32[32] _withdrawalProof, bytes32 _withdrawalRoot) returns()
func (_MorphPortal *MorphPortalTransactorSession) ProveWithdrawalTransaction(_tx TypesWithdrawalTransaction, _withdrawalProof [32][32]byte, _withdrawalRoot [32]byte) (*types.Transaction, error) {
	return _MorphPortal.Contract.ProveWithdrawalTransaction(&_MorphPortal.TransactOpts, _tx, _withdrawalProof, _withdrawalRoot)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_MorphPortal *MorphPortalTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MorphPortal.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_MorphPortal *MorphPortalSession) Unpause() (*types.Transaction, error) {
	return _MorphPortal.Contract.Unpause(&_MorphPortal.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_MorphPortal *MorphPortalTransactorSession) Unpause() (*types.Transaction, error) {
	return _MorphPortal.Contract.Unpause(&_MorphPortal.TransactOpts)
}

// MorphPortalDequeueTransactionIterator is returned from FilterDequeueTransaction and is used to iterate over the raw logs and unpacked data for DequeueTransaction events raised by the MorphPortal contract.
type MorphPortalDequeueTransactionIterator struct {
	Event *MorphPortalDequeueTransaction // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MorphPortalDequeueTransactionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MorphPortalDequeueTransaction)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MorphPortalDequeueTransaction)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MorphPortalDequeueTransactionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MorphPortalDequeueTransactionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MorphPortalDequeueTransaction represents a DequeueTransaction event raised by the MorphPortal contract.
type MorphPortalDequeueTransaction struct {
	StartIndex    *big.Int
	Count         *big.Int
	SkippedBitmap *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterDequeueTransaction is a free log retrieval operation binding the contract event 0xc77f792f838ae38399ac31acc3348389aeb110ce7bedf3cfdbdd5e6679267970.
//
// Solidity: event DequeueTransaction(uint256 startIndex, uint256 count, uint256 skippedBitmap)
func (_MorphPortal *MorphPortalFilterer) FilterDequeueTransaction(opts *bind.FilterOpts) (*MorphPortalDequeueTransactionIterator, error) {

	logs, sub, err := _MorphPortal.contract.FilterLogs(opts, "DequeueTransaction")
	if err != nil {
		return nil, err
	}
	return &MorphPortalDequeueTransactionIterator{contract: _MorphPortal.contract, event: "DequeueTransaction", logs: logs, sub: sub}, nil
}

// WatchDequeueTransaction is a free log subscription operation binding the contract event 0xc77f792f838ae38399ac31acc3348389aeb110ce7bedf3cfdbdd5e6679267970.
//
// Solidity: event DequeueTransaction(uint256 startIndex, uint256 count, uint256 skippedBitmap)
func (_MorphPortal *MorphPortalFilterer) WatchDequeueTransaction(opts *bind.WatchOpts, sink chan<- *MorphPortalDequeueTransaction) (event.Subscription, error) {

	logs, sub, err := _MorphPortal.contract.WatchLogs(opts, "DequeueTransaction")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MorphPortalDequeueTransaction)
				if err := _MorphPortal.contract.UnpackLog(event, "DequeueTransaction", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDequeueTransaction is a log parse operation binding the contract event 0xc77f792f838ae38399ac31acc3348389aeb110ce7bedf3cfdbdd5e6679267970.
//
// Solidity: event DequeueTransaction(uint256 startIndex, uint256 count, uint256 skippedBitmap)
func (_MorphPortal *MorphPortalFilterer) ParseDequeueTransaction(log types.Log) (*MorphPortalDequeueTransaction, error) {
	event := new(MorphPortalDequeueTransaction)
	if err := _MorphPortal.contract.UnpackLog(event, "DequeueTransaction", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MorphPortalDropTransactionIterator is returned from FilterDropTransaction and is used to iterate over the raw logs and unpacked data for DropTransaction events raised by the MorphPortal contract.
type MorphPortalDropTransactionIterator struct {
	Event *MorphPortalDropTransaction // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MorphPortalDropTransactionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MorphPortalDropTransaction)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MorphPortalDropTransaction)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MorphPortalDropTransactionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MorphPortalDropTransactionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MorphPortalDropTransaction represents a DropTransaction event raised by the MorphPortal contract.
type MorphPortalDropTransaction struct {
	Index *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterDropTransaction is a free log retrieval operation binding the contract event 0x43a375005206d20a83abc71722cba68c24434a8dc1f583775be7c3fde0396cbf.
//
// Solidity: event DropTransaction(uint256 index)
func (_MorphPortal *MorphPortalFilterer) FilterDropTransaction(opts *bind.FilterOpts) (*MorphPortalDropTransactionIterator, error) {

	logs, sub, err := _MorphPortal.contract.FilterLogs(opts, "DropTransaction")
	if err != nil {
		return nil, err
	}
	return &MorphPortalDropTransactionIterator{contract: _MorphPortal.contract, event: "DropTransaction", logs: logs, sub: sub}, nil
}

// WatchDropTransaction is a free log subscription operation binding the contract event 0x43a375005206d20a83abc71722cba68c24434a8dc1f583775be7c3fde0396cbf.
//
// Solidity: event DropTransaction(uint256 index)
func (_MorphPortal *MorphPortalFilterer) WatchDropTransaction(opts *bind.WatchOpts, sink chan<- *MorphPortalDropTransaction) (event.Subscription, error) {

	logs, sub, err := _MorphPortal.contract.WatchLogs(opts, "DropTransaction")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MorphPortalDropTransaction)
				if err := _MorphPortal.contract.UnpackLog(event, "DropTransaction", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDropTransaction is a log parse operation binding the contract event 0x43a375005206d20a83abc71722cba68c24434a8dc1f583775be7c3fde0396cbf.
//
// Solidity: event DropTransaction(uint256 index)
func (_MorphPortal *MorphPortalFilterer) ParseDropTransaction(log types.Log) (*MorphPortalDropTransaction, error) {
	event := new(MorphPortalDropTransaction)
	if err := _MorphPortal.contract.UnpackLog(event, "DropTransaction", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MorphPortalInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the MorphPortal contract.
type MorphPortalInitializedIterator struct {
	Event *MorphPortalInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MorphPortalInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MorphPortalInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MorphPortalInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MorphPortalInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MorphPortalInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MorphPortalInitialized represents a Initialized event raised by the MorphPortal contract.
type MorphPortalInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_MorphPortal *MorphPortalFilterer) FilterInitialized(opts *bind.FilterOpts) (*MorphPortalInitializedIterator, error) {

	logs, sub, err := _MorphPortal.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &MorphPortalInitializedIterator{contract: _MorphPortal.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_MorphPortal *MorphPortalFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *MorphPortalInitialized) (event.Subscription, error) {

	logs, sub, err := _MorphPortal.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MorphPortalInitialized)
				if err := _MorphPortal.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_MorphPortal *MorphPortalFilterer) ParseInitialized(log types.Log) (*MorphPortalInitialized, error) {
	event := new(MorphPortalInitialized)
	if err := _MorphPortal.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MorphPortalPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the MorphPortal contract.
type MorphPortalPausedIterator struct {
	Event *MorphPortalPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MorphPortalPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MorphPortalPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MorphPortalPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MorphPortalPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MorphPortalPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MorphPortalPaused represents a Paused event raised by the MorphPortal contract.
type MorphPortalPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_MorphPortal *MorphPortalFilterer) FilterPaused(opts *bind.FilterOpts) (*MorphPortalPausedIterator, error) {

	logs, sub, err := _MorphPortal.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &MorphPortalPausedIterator{contract: _MorphPortal.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_MorphPortal *MorphPortalFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *MorphPortalPaused) (event.Subscription, error) {

	logs, sub, err := _MorphPortal.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MorphPortalPaused)
				if err := _MorphPortal.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_MorphPortal *MorphPortalFilterer) ParsePaused(log types.Log) (*MorphPortalPaused, error) {
	event := new(MorphPortalPaused)
	if err := _MorphPortal.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MorphPortalQueueTransactionIterator is returned from FilterQueueTransaction and is used to iterate over the raw logs and unpacked data for QueueTransaction events raised by the MorphPortal contract.
type MorphPortalQueueTransactionIterator struct {
	Event *MorphPortalQueueTransaction // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MorphPortalQueueTransactionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MorphPortalQueueTransaction)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MorphPortalQueueTransaction)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MorphPortalQueueTransactionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MorphPortalQueueTransactionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MorphPortalQueueTransaction represents a QueueTransaction event raised by the MorphPortal contract.
type MorphPortalQueueTransaction struct {
	Sender     common.Address
	Target     common.Address
	Value      *big.Int
	QueueIndex uint64
	GasLimit   *big.Int
	Data       []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterQueueTransaction is a free log retrieval operation binding the contract event 0x69cfcb8e6d4192b8aba9902243912587f37e550d75c1fa801491fce26717f37e.
//
// Solidity: event QueueTransaction(address indexed sender, address indexed target, uint256 value, uint64 queueIndex, uint256 gasLimit, bytes data)
func (_MorphPortal *MorphPortalFilterer) FilterQueueTransaction(opts *bind.FilterOpts, sender []common.Address, target []common.Address) (*MorphPortalQueueTransactionIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _MorphPortal.contract.FilterLogs(opts, "QueueTransaction", senderRule, targetRule)
	if err != nil {
		return nil, err
	}
	return &MorphPortalQueueTransactionIterator{contract: _MorphPortal.contract, event: "QueueTransaction", logs: logs, sub: sub}, nil
}

// WatchQueueTransaction is a free log subscription operation binding the contract event 0x69cfcb8e6d4192b8aba9902243912587f37e550d75c1fa801491fce26717f37e.
//
// Solidity: event QueueTransaction(address indexed sender, address indexed target, uint256 value, uint64 queueIndex, uint256 gasLimit, bytes data)
func (_MorphPortal *MorphPortalFilterer) WatchQueueTransaction(opts *bind.WatchOpts, sink chan<- *MorphPortalQueueTransaction, sender []common.Address, target []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}
	var targetRule []interface{}
	for _, targetItem := range target {
		targetRule = append(targetRule, targetItem)
	}

	logs, sub, err := _MorphPortal.contract.WatchLogs(opts, "QueueTransaction", senderRule, targetRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MorphPortalQueueTransaction)
				if err := _MorphPortal.contract.UnpackLog(event, "QueueTransaction", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseQueueTransaction is a log parse operation binding the contract event 0x69cfcb8e6d4192b8aba9902243912587f37e550d75c1fa801491fce26717f37e.
//
// Solidity: event QueueTransaction(address indexed sender, address indexed target, uint256 value, uint64 queueIndex, uint256 gasLimit, bytes data)
func (_MorphPortal *MorphPortalFilterer) ParseQueueTransaction(log types.Log) (*MorphPortalQueueTransaction, error) {
	event := new(MorphPortalQueueTransaction)
	if err := _MorphPortal.contract.UnpackLog(event, "QueueTransaction", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MorphPortalTransactionDepositedIterator is returned from FilterTransactionDeposited and is used to iterate over the raw logs and unpacked data for TransactionDeposited events raised by the MorphPortal contract.
type MorphPortalTransactionDepositedIterator struct {
	Event *MorphPortalTransactionDeposited // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MorphPortalTransactionDepositedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MorphPortalTransactionDeposited)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MorphPortalTransactionDeposited)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MorphPortalTransactionDepositedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MorphPortalTransactionDepositedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MorphPortalTransactionDeposited represents a TransactionDeposited event raised by the MorphPortal contract.
type MorphPortalTransactionDeposited struct {
	From       common.Address
	To         common.Address
	Version    *big.Int
	OpaqueData []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterTransactionDeposited is a free log retrieval operation binding the contract event 0xb3813568d9991fc951961fcb4c784893574240a28925604d09fc577c55bb7c32.
//
// Solidity: event TransactionDeposited(address indexed from, address indexed to, uint256 indexed version, bytes opaqueData)
func (_MorphPortal *MorphPortalFilterer) FilterTransactionDeposited(opts *bind.FilterOpts, from []common.Address, to []common.Address, version []*big.Int) (*MorphPortalTransactionDepositedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var versionRule []interface{}
	for _, versionItem := range version {
		versionRule = append(versionRule, versionItem)
	}

	logs, sub, err := _MorphPortal.contract.FilterLogs(opts, "TransactionDeposited", fromRule, toRule, versionRule)
	if err != nil {
		return nil, err
	}
	return &MorphPortalTransactionDepositedIterator{contract: _MorphPortal.contract, event: "TransactionDeposited", logs: logs, sub: sub}, nil
}

// WatchTransactionDeposited is a free log subscription operation binding the contract event 0xb3813568d9991fc951961fcb4c784893574240a28925604d09fc577c55bb7c32.
//
// Solidity: event TransactionDeposited(address indexed from, address indexed to, uint256 indexed version, bytes opaqueData)
func (_MorphPortal *MorphPortalFilterer) WatchTransactionDeposited(opts *bind.WatchOpts, sink chan<- *MorphPortalTransactionDeposited, from []common.Address, to []common.Address, version []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var versionRule []interface{}
	for _, versionItem := range version {
		versionRule = append(versionRule, versionItem)
	}

	logs, sub, err := _MorphPortal.contract.WatchLogs(opts, "TransactionDeposited", fromRule, toRule, versionRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MorphPortalTransactionDeposited)
				if err := _MorphPortal.contract.UnpackLog(event, "TransactionDeposited", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransactionDeposited is a log parse operation binding the contract event 0xb3813568d9991fc951961fcb4c784893574240a28925604d09fc577c55bb7c32.
//
// Solidity: event TransactionDeposited(address indexed from, address indexed to, uint256 indexed version, bytes opaqueData)
func (_MorphPortal *MorphPortalFilterer) ParseTransactionDeposited(log types.Log) (*MorphPortalTransactionDeposited, error) {
	event := new(MorphPortalTransactionDeposited)
	if err := _MorphPortal.contract.UnpackLog(event, "TransactionDeposited", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MorphPortalUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the MorphPortal contract.
type MorphPortalUnpausedIterator struct {
	Event *MorphPortalUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MorphPortalUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MorphPortalUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MorphPortalUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MorphPortalUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MorphPortalUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MorphPortalUnpaused represents a Unpaused event raised by the MorphPortal contract.
type MorphPortalUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_MorphPortal *MorphPortalFilterer) FilterUnpaused(opts *bind.FilterOpts) (*MorphPortalUnpausedIterator, error) {

	logs, sub, err := _MorphPortal.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &MorphPortalUnpausedIterator{contract: _MorphPortal.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_MorphPortal *MorphPortalFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *MorphPortalUnpaused) (event.Subscription, error) {

	logs, sub, err := _MorphPortal.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MorphPortalUnpaused)
				if err := _MorphPortal.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_MorphPortal *MorphPortalFilterer) ParseUnpaused(log types.Log) (*MorphPortalUnpaused, error) {
	event := new(MorphPortalUnpaused)
	if err := _MorphPortal.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MorphPortalWithdrawalFinalizedIterator is returned from FilterWithdrawalFinalized and is used to iterate over the raw logs and unpacked data for WithdrawalFinalized events raised by the MorphPortal contract.
type MorphPortalWithdrawalFinalizedIterator struct {
	Event *MorphPortalWithdrawalFinalized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MorphPortalWithdrawalFinalizedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MorphPortalWithdrawalFinalized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MorphPortalWithdrawalFinalized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MorphPortalWithdrawalFinalizedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MorphPortalWithdrawalFinalizedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MorphPortalWithdrawalFinalized represents a WithdrawalFinalized event raised by the MorphPortal contract.
type MorphPortalWithdrawalFinalized struct {
	WithdrawalHash [32]byte
	Success        bool
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalFinalized is a free log retrieval operation binding the contract event 0xdb5c7652857aa163daadd670e116628fb42e869d8ac4251ef8971d9e5727df1b.
//
// Solidity: event WithdrawalFinalized(bytes32 indexed withdrawalHash, bool success)
func (_MorphPortal *MorphPortalFilterer) FilterWithdrawalFinalized(opts *bind.FilterOpts, withdrawalHash [][32]byte) (*MorphPortalWithdrawalFinalizedIterator, error) {

	var withdrawalHashRule []interface{}
	for _, withdrawalHashItem := range withdrawalHash {
		withdrawalHashRule = append(withdrawalHashRule, withdrawalHashItem)
	}

	logs, sub, err := _MorphPortal.contract.FilterLogs(opts, "WithdrawalFinalized", withdrawalHashRule)
	if err != nil {
		return nil, err
	}
	return &MorphPortalWithdrawalFinalizedIterator{contract: _MorphPortal.contract, event: "WithdrawalFinalized", logs: logs, sub: sub}, nil
}

// WatchWithdrawalFinalized is a free log subscription operation binding the contract event 0xdb5c7652857aa163daadd670e116628fb42e869d8ac4251ef8971d9e5727df1b.
//
// Solidity: event WithdrawalFinalized(bytes32 indexed withdrawalHash, bool success)
func (_MorphPortal *MorphPortalFilterer) WatchWithdrawalFinalized(opts *bind.WatchOpts, sink chan<- *MorphPortalWithdrawalFinalized, withdrawalHash [][32]byte) (event.Subscription, error) {

	var withdrawalHashRule []interface{}
	for _, withdrawalHashItem := range withdrawalHash {
		withdrawalHashRule = append(withdrawalHashRule, withdrawalHashItem)
	}

	logs, sub, err := _MorphPortal.contract.WatchLogs(opts, "WithdrawalFinalized", withdrawalHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MorphPortalWithdrawalFinalized)
				if err := _MorphPortal.contract.UnpackLog(event, "WithdrawalFinalized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawalFinalized is a log parse operation binding the contract event 0xdb5c7652857aa163daadd670e116628fb42e869d8ac4251ef8971d9e5727df1b.
//
// Solidity: event WithdrawalFinalized(bytes32 indexed withdrawalHash, bool success)
func (_MorphPortal *MorphPortalFilterer) ParseWithdrawalFinalized(log types.Log) (*MorphPortalWithdrawalFinalized, error) {
	event := new(MorphPortalWithdrawalFinalized)
	if err := _MorphPortal.contract.UnpackLog(event, "WithdrawalFinalized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MorphPortalWithdrawalProvenIterator is returned from FilterWithdrawalProven and is used to iterate over the raw logs and unpacked data for WithdrawalProven events raised by the MorphPortal contract.
type MorphPortalWithdrawalProvenIterator struct {
	Event *MorphPortalWithdrawalProven // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MorphPortalWithdrawalProvenIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MorphPortalWithdrawalProven)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MorphPortalWithdrawalProven)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MorphPortalWithdrawalProvenIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MorphPortalWithdrawalProvenIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MorphPortalWithdrawalProven represents a WithdrawalProven event raised by the MorphPortal contract.
type MorphPortalWithdrawalProven struct {
	WithdrawalHash [32]byte
	From           common.Address
	To             common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterWithdrawalProven is a free log retrieval operation binding the contract event 0x67a6208cfcc0801d50f6cbe764733f4fddf66ac0b04442061a8a8c0cb6b63f62.
//
// Solidity: event WithdrawalProven(bytes32 indexed withdrawalHash, address indexed from, address indexed to)
func (_MorphPortal *MorphPortalFilterer) FilterWithdrawalProven(opts *bind.FilterOpts, withdrawalHash [][32]byte, from []common.Address, to []common.Address) (*MorphPortalWithdrawalProvenIterator, error) {

	var withdrawalHashRule []interface{}
	for _, withdrawalHashItem := range withdrawalHash {
		withdrawalHashRule = append(withdrawalHashRule, withdrawalHashItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MorphPortal.contract.FilterLogs(opts, "WithdrawalProven", withdrawalHashRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MorphPortalWithdrawalProvenIterator{contract: _MorphPortal.contract, event: "WithdrawalProven", logs: logs, sub: sub}, nil
}

// WatchWithdrawalProven is a free log subscription operation binding the contract event 0x67a6208cfcc0801d50f6cbe764733f4fddf66ac0b04442061a8a8c0cb6b63f62.
//
// Solidity: event WithdrawalProven(bytes32 indexed withdrawalHash, address indexed from, address indexed to)
func (_MorphPortal *MorphPortalFilterer) WatchWithdrawalProven(opts *bind.WatchOpts, sink chan<- *MorphPortalWithdrawalProven, withdrawalHash [][32]byte, from []common.Address, to []common.Address) (event.Subscription, error) {

	var withdrawalHashRule []interface{}
	for _, withdrawalHashItem := range withdrawalHash {
		withdrawalHashRule = append(withdrawalHashRule, withdrawalHashItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MorphPortal.contract.WatchLogs(opts, "WithdrawalProven", withdrawalHashRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MorphPortalWithdrawalProven)
				if err := _MorphPortal.contract.UnpackLog(event, "WithdrawalProven", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawalProven is a log parse operation binding the contract event 0x67a6208cfcc0801d50f6cbe764733f4fddf66ac0b04442061a8a8c0cb6b63f62.
//
// Solidity: event WithdrawalProven(bytes32 indexed withdrawalHash, address indexed from, address indexed to)
func (_MorphPortal *MorphPortalFilterer) ParseWithdrawalProven(log types.Log) (*MorphPortalWithdrawalProven, error) {
	event := new(MorphPortalWithdrawalProven)
	if err := _MorphPortal.contract.UnpackLog(event, "WithdrawalProven", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
